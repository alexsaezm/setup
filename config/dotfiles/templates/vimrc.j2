if empty(glob('{{ editor.autoload }}/plug.vim'))
  silent !curl -fLo {{ editor.autoload }}/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" ----------------- Plugins ---------------------------------------------------
" To update: :PlugInstall
call plug#begin('{{ editor.bundle }}')
  {% for package in editor.packages %}
  Plug {{ package }}
  {% endfor %}
call plug#end()

" ----------------- Global options --------------------------------------------
set nocompatible                                " Enable vim features
set encoding=utf-8                              " UTF-8 support
set shiftwidth=2
set tabstop=2
set expandtab
set laststatus=2
set cursorline                                  " Highlight current line
set guioptions-=r                               " Remove right-hand scroll bar
set guioptions-=L                               " Remove left-hand scroll bar
set number relativenumber                       " Turn hybrid line numbers on
set number                                      " Show line numbers
set modeline
set modelines=2                                 " Load config options in the files (modelines)
set clipboard+=unnamedplus                      " Use linux clipboard
set ignorecase                                  " Case insensitive searching
set smartcase                                   " Case-sensitive if expresson contains a capital letter
set incsearch                                   " Set incremental search, like modern browsers
set nolazyredraw                                " Don't redraw while executing macros
set smartindent
set showtabline=2                               " This forces the tabline to always show
set ssop-=options                               " Do not store global and local values in a session
set ssop-=folds                                 " Do not store folds
set mouse=nicr                                  " Mouse scrolling

" ----------------- Movement section -----------------------------------------
" unset the arrows to avoid using an inpure workflow :)
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

nnoremap <leader>h <C-W>h
nnoremap <leader>j <C-W>j
nnoremap <leader>k <C-W>k
nnoremap <leader>l <C-W>l

" classic tab/shift+tab movement
nnoremap  <silent>   <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:tabNext<CR>
nnoremap  <silent> <s-tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:tabprevious<CR>

set path+=./**

" Type jj quickly to esc
inoremap jj <Esc>

" built-in file explorer
let g:netrw_banner = 0
let g:netrw_liststyle = 0
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
let g:mapleader = "\<Space>"
let g:maplocalleader = ','

function! s:run_tmux(opts)
    " asyncrun has temporarily changed dir for you
    " getcwd() in the runner function is the target directory defined in `-cwd=xxx`  
    let cwd = getcwd()   
    call VimuxRunCommand('cd ' . shellescape(cwd) . '; ' . a:opts.cmd)
endfunction

let g:asyncrun_runner = get(g:, 'asyncrun_runner', {})
let g:asyncrun_runner.tmux = function('s:run_tmux')

" Run make async on a vertical quickfix buffer
nnoremap <leader>m :AsyncRun -mode=term -pos=tmux make<CR>

" Buffers trick
nnoremap <leader>b :set nomore <bar> :ls <Bar> :set more <CR>:b<Space>

function! s:run_search(text)
  call vimgrepadd text
endfunction

" Search for a term in all of the opened buffers
command -nargs=* Vsearch vimgrep /\v<args>/g **/* | copen
nnoremap <leader>s :Vsearch<Space>

" ----------------- Status line -----------------------------------------------
let g:lightline#bufferline#show_number  = 1
let g:lightline#bufferline#shorten_path = 0
let g:lightline#bufferline#unnamed      = '[No Name]'

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }

" ----------------- Backup section --------------------------------------------
" It moves the vim backups to /tmp instead of the current folder
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" ----------------- Undo section ----------------------------------------------
" Thanks to https://stackoverflow.com/a/22676189
" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undo')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
    set undolevels=1000         " How many undos
    set undoreload=10000        " number of lines to save for undo
endif

" ----------------- Theme section ---------------------------------------------
filetype plugin indent on                       " Load filetype-specific indent files
set bg=dark
color gruvbox

syntax on

" ----------------- LSP section -----------------------------------------------
let g:lsp_diagnostics_echo_cursor = 1

" ----------------- Markdown section ------------------------------------------
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en
autocmd BufRead,BufNewFile *.md setlocal tw=79
autocmd BufRead,BufNewFile *.md hi link Task DraculaGreen
autocmd BufRead,BufNewFile *.md hi link Bug DraculaYellow
autocmd BufRead,BufNewFile *.md syn keyword Task TODO
autocmd BufRead,BufNewFile *.md syn keyword Bug FIXME

