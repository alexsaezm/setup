if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" ----------------- Plugins ---------------------------------------------------
" To update: :PlugInstall
call plug#begin('~/.vim/bundle')

  Plug 'tpope/vim-sensible'
  Plug 'dkarter/bullets.vim'
  Plug 'pearofducks/ansible-vim'
  Plug 'hashivim/vim-vagrant'
  Plug 'fatih/vim-go'
  Plug 'tpope/vim-fugitive'
	Plug 'dracula/vim'
  Plug 'luochen1990/rainbow'
  Plug 'junegunn/limelight.vim'
  Plug 'junegunn/goyo.vim'
  Plug 'itchyny/lightline.vim'
  Plug 'mengelbrecht/lightline-bufferline'

  " LSP support
  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'mattn/vim-lsp-settings'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'

call plug#end()

" ----------------- Global options --------------------------------------------
set nocompatible                                " Enable vim features
set encoding=utf-8                              " UTF-8 support
set shiftwidth=2
set tabstop=2
set expandtab
set laststatus=2
set cursorline                                  " Highlight current line
set guifont=Monaco:h14                          " Set Monaco with size 14 as font
set guioptions-=r                               " Remove right-hand scroll bar
set guioptions-=L                               " Remove left-hand scroll bar
set number relativenumber                       " Turn hybrid line numbers on
set number                                      " Show line numbers
set modeline
set modelines=2                                 " Load config options in the files (modelines)
set clipboard+=unnamedplus                      " Use linux clipboard
set ignorecase                                  " Case insensitive searching
set smartcase                                   " Case-sensitive if expresson contains a capital letter
set incsearch                                   " Set incremental search, like modern browsers
set nolazyredraw                                " Don't redraw while executing macros
set smartindent
set showtabline=2                               " This forces the tabline to always show

" ----------------- Status line -----------------------------------------------
let g:lightline#bufferline#show_number  = 1
let g:lightline#bufferline#shorten_path = 0
let g:lightline#bufferline#unnamed      = '[No Name]'

let g:lightline                  = {}
let g:lightline.tabline          = {'left': [['buffers']], 'right': [['close']]}
let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type   = {'buffers': 'tabsel'}
" ----------------- Backup section --------------------------------------------
" It moves the vim backups to /tmp instead of the current folder
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" ----------------- Undo section ----------------------------------------------
" Thanks to https://stackoverflow.com/a/22676189
" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undo')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
    set undolevels=1000         " How many undos
    set undoreload=10000        " number of lines to save for undo
endif

" ----------------- Theme section ---------------------------------------------
filetype plugin indent on                       " Load filetype-specific indent files
set background=dark
color dracula                                   " https://draculatheme.com/vim
let g:airline_theme='dracula'
let g:rainbow_active=1
syntax on

" Buffers trick
nnoremap <C-e> :set nomore <Bar> :ls <Bar> :set more <CR>:b<Space>

" ----------------- Movement section ------------------------------------------
" unset the arrows to avoid using an inpure workflow :)
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

set path+=./**
" Type jj quickly to esc
inoremap jj <Esc>

" ----------------- Markdown section ------------------------------------------
autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en
autocmd BufRead,BufNewFile *.md setlocal tw=79
autocmd BufRead,BufNewFile *.md hi link Task DraculaGreen
autocmd BufRead,BufNewFile *.md hi link Bug DraculaYellow
autocmd BufRead,BufNewFile *.md syn keyword Task TODO
autocmd BufRead,BufNewFile *.md syn keyword Bug FIXME
